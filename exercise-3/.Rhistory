# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
install.packages(ggplot2)
install.packages("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, size = 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars"
# marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
# install.packages("ggplot2")
library(ggplot2)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
# install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
# install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
# install.packages("ggplot2")
library(ggplot2)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
# install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/Seka/Desktop/INFO201/ch16-shiny/exercise-3")
View(mpg)
# UI for scatterplot
library(shiny)
is.data.frame(mpg)
is.data.frame("mpg")
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
library(ggplot2)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
View(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
selectOutput("x_var")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
selectOutput("x_var")
)
# UI for scatterplot
library(shiny)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
selectOutput("x_var")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
selectOutput("x_var")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
selectOutput("x_var")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
selectOutput("x_var"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color"),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable"),
selectOutput("x_var"),
# Add a select input for the y variable
selectInput("y_var", "Y Variable"),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color"),
# Plot the output with the name "scatter"
plotOutput("scatter"),
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable", choices = select_values),
# Add a select input for the y variable
selectInput("y_var", "Y Variable", choices = select_values),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color"),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
# A page header
h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable", choices = select_values),
# Add a select input for the y variable
selectInput("y_var", "Y Variable", choices = select_values),
# Add a sliderInput to set the size of each point
sliderInput("slider", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", choices = c("Red", "Blue"), "Color"),
# Plot the output with the name "scatter"
plotOutput("scatter")
)
shinyUI(ui)
shinyServer(server)
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
}
shinyServer(server)
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
# Store x and y values to plot
x_values <- mpg$input$x_var
y_values <- input$y_var
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input)
# Create ggplot scatter
}
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
# Store x and y values to plot
x_values <- mpg$input$x_var
y_values <- mpg$input$y_var
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
output$scatter <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values), color = input$color)
}
shinyServer(server)
runApp()
runApp()
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
# Store x and y values to plot
x_values <- mpg[input$x_var]
y_values <- mpg[input$y_var]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
output$scatter <- renderPlot({
ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values), color = input$color)
})
}
runApp()
runApp()
runApp()
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- mpg[input$x_var]
y_values <- mpg[input$y_var]
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
plot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) + labs(title = title_graph)
})
}
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- mpg[input$x_var]
y_values <- mpg[input$y_var]
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
scatterplot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) +
labs(title = title_graph)
return(scatterplot)
})
}
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- mpg[input$x_var]
y_values <- mpg[input$y_var]
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
scatterplot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) +
labs(title = title_graph)
scatterplot
})
}
shinyServer(server)
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- input$x_var
y_values <- iput$y_var
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
scatterplot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) +
labs(title = title_graph)
scatterplot
})
}
shinyServer(server)
runApp()
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- mpg[[input$x_var]]
y_values <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
scatterplot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) +
labs(title = title_graph)
scatterplot
})
}
shinyServer(server)
runApp()
# Create a shiny server that creates a scatterplot.
server <- function(input, output) {
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
output$scatter <- renderPlot({
# Store x and y values to plot
x_values <- mpg[[input$x_var]]
y_values <- mpg[[input$y_var]]
# Store the title of the graph in a variable
title_graph <- paste0("MPG Dataset: ", input$x_var, "v.s. ", input$y_var)
# Create ggplot scatter
scatterplot <- ggplot(mpg) +
geom_point(mapping = aes(x = x_values, y = y_values),
color = input$color, size = input$size) +
labs(title = title_graph, x = input$x_var, y = input$y_var)
scatterplot
})
}
runApp()
runApp()
runApp()
runApp()
# Create a shinyUI with a `fluidPage` layout
ui <- navbarPage(
titlePanel("Participation 6: MPG Dataset Exploration"),
sidebarLayout(
sidebarPanel(
# A page header
#h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable", choices = select_values),
# Add a select input for the y variable
selectInput("y_var", "Y Variable", choices = select_values),
# Add a sliderInput to set the size of each point
sliderInput("size", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color", choices = c("red", "blue"))
),
mainPanel(
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
)
runApp()
# Create a shinyUI with a `fluidPage` layout
ui <- pageWithSidebar(
titlePanel("Participation 6: MPG Dataset Exploration"),
sidebarLayout(
sidebarPanel(
# A page header
#h1("Participation 6: MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput("x_var", "X Variable", choices = select_values),
# Add a select input for the y variable
selectInput("y_var", "Y Variable", choices = select_values),
# Add a sliderInput to set the size of each point
sliderInput("size", "Size of point", 1, 10, value = 1, step = 1),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color", "Color", choices = c("red", "blue"))
),
mainPanel(
# Plot the output with the name "scatter"
plotOutput("scatter")
)
)
)
runApp()
runApp()
